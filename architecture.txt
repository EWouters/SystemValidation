sort
	Chamber = struct cI | cO | cL | cH;
	Pressure = struct pA | pL | pH;
	Door = struct dAI | dAO | dLI | dLO | dH;
	Robot = struct rI | rO;
	State = struct sO | sC;
	Action = struct aG | aR;


%Door_Controller = struct Door_AI | Door_AO | Door_LI | Door_LO | Door_H;
%Chamber_Controller = struct Chamber_I | Chamber_O | Chamber_L | Chamber_H;
%Robot_Controller = struct Robot_I | Robot_O;

%map;

%var;

%eqn;

act 
	set_pressure;
	set_door: Door # State;
	move;
	system_want_in;
	system_want_out;
	wafer_in;
	wafer_out;
	pressure_confirmed;
	door_confirmed;
	robot_confirmed;

% We can try to program this anti-chronological, meaning we start with the action/process to remove a wafer, then work backwards
%proc P = move . P;
proc Door_Controller(door:Door,
					 state:State) = (
		(door == dAI) -> (
			(state == sO) -> set_door(door,state)
		)
	);

init P;