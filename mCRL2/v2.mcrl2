sort
	Chamber = struct cT | cI | cO | cL | cH;
	Pressure = struct pA | pL | pH;
	Door = struct dAI | dAO | dLI | dLO | dH;
	Robot = struct rI | rO | rT;
	DoorState = struct sO | sC;
	Action = struct aG | aR;
	WaferStatus   = struct wN | wP;

map
	pressuresStart: Chamber -> Pressure;
	doorsStart: Door -> DoorState;
	actionsStart: Robot -> Action;

	%c2d: Chamber -> List(Door); % get list of doors connected to chamber
	%d2c: Door -> List(Chamber); % get list of chambers connected to door
	d2p: Door -> Pressure; % get the required pressure for all of the chambers connected to door
	cr2d: Chamber # Robot -> Door; % get the door that needs to open for a robot to perform any action in a chamber
	cs2c: Chamber # WaferStatus -> Chamber; % get the next chamber that the wafer needs to move to.
	c2c2r: Chamber # Chamber -> Robot; % get the robot that will move the wafer to the next chamber.
	c2c2a: Chamber # Chamber -> Action; % get the action for the robot that will move the wafer to the next chamber.
	
var
	chamber: Chamber;
	door: Door;
	robot: Robot;

eqn
	pressuresStart(chamber) = pA;
	doorsStart(door) = sC;
	actionsStart(robot) = aR;

	%c2d(cI) = [dAI, dLI];
	%c2d(cO) = [dAO, dLO];
	%c2d(cL) = [dLI, dLO, dH];
	%c2d(cH) = [dH];

	%d2c(dAI) = [cI];
	%d2c(dAO) = [cO];
	%d2c(dLI) = [cI, cL];
	%d2c(dLO) = [cL, cO];
	%d2c(dH ) = [cL, cH];

	d2p(dAI) = pA;
	d2p(dAO) = pA;
	d2p(dLI) = pL;
	d2p(dLO) = pL;
	d2p(dH ) = pH;

	cr2d(cI, rI) = dLI; %
	cr2d(cI, rT) = dAI; %
	cr2d(cO, rO) = dLO; %
	cr2d(cO, rT) = dAO; %
	%cr2d(cL, rI) = dLI;
	%cr2d(cL, rO) = dLO;
	cr2d(cH, rI) = dH;  %
	cr2d(cH, rO) = dH;  %
	cr2d(cT, rT) = dAO;

	%cs2c(cT, wP) = cT; % ????????
	cs2c(cT, wN) = cI;
	cs2c(cI, wP) = cT;
	cs2c(cL, wN) = cH;
	cs2c(cL, wP) = cO;
	cs2c(cH, wN) = cL; % ????????
	cs2c(cH, wP) = cL;
	cs2c(cO, wN) = cL;
	cs2c(cO, wP) = cT;

	c2c2r(cT,cI) = rT;
	c2c2r(cI,cL) = rI;
	c2c2r(cL,cH) = rI;
	c2c2r(cH,cL) = rO;
	c2c2r(cL,cO) = rO;
	c2c2r(cO,cT) = rT;

	c2c2a(cT,cI) = aR;
	c2c2a(cI,cL) = aG;
	c2c2a(cL,cH) = aR;
	c2c2a(cH,cL) = aG;
	c2c2a(cL,cO) = aR;
	c2c2a(cO,cT) = aG;
	
	
	
	
	

act
	nop1,
	nop2,
	nop3,
	nop4,
	nop5,
	nop6,
	nop, Yay;


	% external actions
	Wafer_In;
	Project_wafer;
	s_wafer_out;
	sysFinished;

	% communication actions (s = send, r = receive, c = communicate)
	s_Set_Door, r_Set_Door, c_Set_Door: Door # DoorState;
	s_Door_Confirmed, r_Door_Confirmed, c_Door_Confirmed: Door;

	s_Set_Pressure, r_Set_Pressure, c_Set_Pressure: Chamber # Pressure;
	s_Pressure_Confirmed, r_Pressure_Confirmed, c_Pressure_Confirmed: Chamber;

	s_Move, r_Move, c_Move: Robot # Chamber # Action;
	s_Move_Confirmed, r_Move_Confirmed, c_Move_Confirmed: Robot;

	s_door_status_request, r_door_status_request, c_door_status_request: Door;
	s_door_status_response, r_door_status_response, c_door_status_response: Door # DoorState;

	s_pressure_status_request, r_pressure_status_request, c_pressure_status_request: Chamber;
	s_pressure_status_response, r_pressure_status_response, c_pressure_status_response: Chamber # Pressure;

	s_robot_status_request, r_robot_status_request, c_robot_status_request: Robot;
	s_robot_status_response, r_robot_status_response, c_robot_status_response: Robot # Action;

	s_door_set_request, r_door_set_request, c_door_set_request: Door # DoorState;
	s_pressure_set_request, r_pressure_set_request, c_pressure_set_request: Chamber # Pressure;
	s_robot_set_request, r_robot_set_request, c_robot_set_request: Robot # Action;

proc

	Pressure_State_Controller(status: Chamber -> Pressure) = (
		sum c: Chamber, p: Pressure . r_pressure_status_request(c) . s_pressure_status_response(c, status(c)) . Pressure_State_Controller()
		+
		sum c: Chamber, p: Pressure . r_pressure_set_request(c, p) . Pressure_State_Controller(status[c -> p])
	);
	Pressure_Controller(c:Chamber) = (
	%	if p == this p -> confirm
	%	elseif doors of this room are closed -> confirm and update pressures
	%	else -> close doors, wait for confirmation of doors, send confirm and update pressures

		sum p: Pressure.
		(
			r_Set_Pressure(c, p)
			. s_pressure_status_request(c)
			. sum ps:Pressure.
			(
				r_pressure_status_response(c, ps)
				. ((p == ps) -> % if p == pstate -> confirm
					s_Pressure_Confirmed(c)
					. Pressure_Controller(c)
				<>
				
				
				
				
				
				
				
	%				(sum d:Door.
	%				(
	%					((d in c2d(c)) ->
	%						s_door_status_request(d)
	%						. (sum ds:DoorState.
	%							r_door_status_response(d, ds)
	%							. ((ds != sC) ->
	%								s_Set_Door(d, sC)
	%								. r_Door_Confirmed(d)
	%							<>
	%								nop4 % Empty else statement ???
	%							)
	%						)
	%						s_Set_Door(d, sC)
	%						. r_Door_Confirmed(d)
	%					%<>
	%					%	nop1 % Empty else statement ???
	%					)
	%				))
				
	%				(sum d:Door.
	%				(
	%					((d in c2d(c)) ->
	%						askCloseDoor(d)
	%					%<>
	%					%	nop1 % Empty else statement ???
	%					)
	%				))
	
	
	
	
	
	
	
					%(
					%	((c == cI) ->
					%		askCloseDoor(dAI)
					%		. askCloseDoor(dLI)
					%	<>
					%		nop1 % Empty else statement ???
					%	)
					%	+ ((c == cO) ->
					%		askCloseDoor(dAO)
					%		. askCloseDoor(dLO)
					%	<>
					%		nop1 % Empty else statement ???
					%	)
		            %
					%	+ ((c == cL) ->
					%		askCloseDoor(dLI)
					%		. askCloseDoor(dLO)
					%		. askCloseDoor(dH )
					%	<>
					%		nop1 % Empty else statement ???
					%	)
					%	+ ((c == cH) ->
					%		askCloseDoor(dH )
					%	<>
					%		nop1 % Empty else statement ???
					%	)
					%)
					
					(
						((c == cI) ->
							askCloseDoor(dAI)
							. askCloseDoor(dLI)
						)
						+ ((c == cO) ->
							askCloseDoor(dAO)
							. askCloseDoor(dLO)
						)
		
						+ ((c == cL) ->
							askCloseDoor(dLI)
							. askCloseDoor(dLO)
							. askCloseDoor(dH )
						)
						+ ((c == cH) ->
							askCloseDoor(dH )
						)
					)
					
			%		(
			%			((c == cI) -> 
			%				askCloseDoor(dAI)
			%				. askCloseDoor(dLI)
			%			<>
			%				((c == cO) -> 
			%					askCloseDoor(dAO)
			%					. askCloseDoor(dLO)
			%				<>
			%					((c == cL) -> 
			%						askCloseDoor(dLI)
			%						. askCloseDoor(dLO)
			%						. askCloseDoor(dH )
			%					<>
			%						((c == cH) -> 
			%							askCloseDoor(dH )
			%						<>
			%							nop1 % Empty else statement ???
			%						)
			%					)
			%				)
			%			)
			%		)
					. s_pressure_set_request(c, p)
					. s_Pressure_Confirmed(c)
					. Pressure_Controller(c)
				)
			)
		)
	);

	Door_State_Controller(status: Door -> DoorState) = (
		sum d: Door, s: DoorState . r_door_status_request(d) . s_door_status_response(d, status(d)) . Door_State_Controller()
		+
		sum d: Door, s: DoorState . r_door_set_request(d, s) . Door_State_Controller(status[d -> s])
	);
	
	
	
%	askSetPressure(d:Door, c:Chamber) = s_door_status_request(d). (r_door_status_response(d, sO) . s_Set_Door(d, sC) . r_Door_Confirmed(d) + r_door_status_response(d, sC));
%									s_pressure_status_request(c). (r_pressure_status_response(c, p) . s_Set_Pressure(c, d2p(d)) . r_Pressure_Confirmed(c) + 
%																					. ((d2p(d) != p)




	askCloseDoor(d:Door) = s_door_status_request(d). (r_door_status_response(d, sO) . s_Set_Door(d, sC) . r_Door_Confirmed(d) + r_door_status_response(d, sC));
	
	Door_Controller(d:Door) = (
	%	if door is in requested state -> confirm
	%	elseif door open -> close door, confirm
	%	elseif pressure is correct -> open door, confirm
	%	else -> set pressure, wait for confirm of pressure, open door, confirm

		sum s:DoorState.
		(
			r_Set_Door(d, s)
			. s_door_status_request(d)
			. sum ds:DoorState.
			(
				r_door_status_response(d, ds)
				. ((ds == s) -> % The door is in the requested state
					s_Door_Confirmed(d)
					. Door_Controller(d)
				<> ((ds == sO) -> % The door is open and must be closed
					s_door_set_request(d, s)
					. s_Door_Confirmed(d)
					. Door_Controller(d)
					<> % The door is closed and must be opened
					
					
					
	%					sum c:Chamber.
	%					(					
	%						((c in d2c(d)) ->
	%							s_pressure_status_request(c)
	%							. (sum p:Pressure.
	%							(
	%								r_pressure_status_response(c, p)
	%								. ((d2p(d) != p) ->
	%									s_Set_Pressure(c, d2p(d))
	%									. r_Pressure_Confirmed(c)
	%								<>
	%									nop2 % Empty else statement ???
	%								)
	%							))
	%						)
	%					)
						
						
	%					
	%					((c in d2c(d)) ->
	%						s_pressure_status_request(c)
	%						. (sum p:Pressure.
	%						(
	%							r_pressure_status_response(c, p)
	%							. ((d2p(d) != p) ->
	%								s_Set_Pressure(c, d2p(d))
	%								. r_Pressure_Confirmed(c)
	%							<>
	%								nop2 % Empty else statement ???
	%							)
	%						))
	%					)
						
		%				(
		%					((d == dAI) ->
		%						s_pressure_status_request(cI)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cI, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cI, d2p(d))
		%								. r_Pressure_Confirmed(cI)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%					<>
		%						nop3 % Empty else statement ???
		%					)
		%					+ ((d == dAO) ->
		%						s_pressure_status_request(cO)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cO, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cO, d2p(d))
		%								. r_Pressure_Confirmed(cO)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%					<>
		%						nop3 % Empty else statement ???
		%					)
		%					+ ((d == dLI) ->
		%						s_pressure_status_request(cI)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cI, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cI, d2p(d))
		%								. r_Pressure_Confirmed(cI)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%						. s_pressure_status_request(cL)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cL, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cL, d2p(d))
		%								. r_Pressure_Confirmed(cL)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%					<>
		%						nop3 % Empty else statement ???
		%					)
		%					+ ((d == dLO) ->
		%						s_pressure_status_request(cL)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cL, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cL, d2p(d))
		%								. r_Pressure_Confirmed(cL)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%						. s_pressure_status_request(cO)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cO, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cO, d2p(d))
		%								. r_Pressure_Confirmed(cO)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%					<>
		%						nop3 % Empty else statement ???
		%					)
		%					+ ((d == dH ) ->
		%						s_pressure_status_request(cL)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cL, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cL, d2p(d))
		%								. r_Pressure_Confirmed(cL)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%						. s_pressure_status_request(cH)
		%						. (sum p:Pressure.
		%						(
		%							r_pressure_status_response(cH, p)
		%							. ((d2p(d) != p) ->
		%								s_Set_Pressure(cH, d2p(d))
		%								. r_Pressure_Confirmed(cH)
		%							<>
		%								nop2 % Empty else statement ???
		%							)
		%						))
		%					<>
		%						nop3 % Empty else statement ???
		%					)
		%					
		%				)
						
						(
							((d == dAI) ->
								s_pressure_status_request(cI)
								. (sum p:Pressure.
								(
									r_pressure_status_response(cI, p)
									. ((d2p(d) != p) ->
										s_Set_Pressure(cI, d2p(d))
										. r_Pressure_Confirmed(cI)
									<>
										nop2 % Empty else statement ???
									)
								))
							<>
								((d == dAO) ->
									s_pressure_status_request(cO)
									. (sum p:Pressure.
									(
										r_pressure_status_response(cO, p)
										. ((d2p(d) != p) ->
											s_Set_Pressure(cO, d2p(d))
											. r_Pressure_Confirmed(cO)
										<>
											nop2 % Empty else statement ???
										)
									))
								<>
									((d == dLI) ->
										s_pressure_status_request(cI)
										. (sum p:Pressure.
										(
											r_pressure_status_response(cI, p)
											. ((d2p(d) != p) ->
												s_Set_Pressure(cI, d2p(d))
												. r_Pressure_Confirmed(cI)
											<>
												nop2 % Empty else statement ???
											)
										))
										. s_pressure_status_request(cL)
										. (sum p:Pressure.
										(
											r_pressure_status_response(cL, p)
											. ((d2p(d) != p) ->
												s_Set_Pressure(cL, d2p(d))
												. r_Pressure_Confirmed(cL)
											<>
												nop2 % Empty else statement ???
											)
										))
									<>
										((d == dLO) ->
											s_pressure_status_request(cL)
											. (sum p:Pressure.
											(
												r_pressure_status_response(cL, p)
												. ((d2p(d) != p) ->
													s_Set_Pressure(cL, d2p(d))
													. r_Pressure_Confirmed(cL)
												<>
													nop2 % Empty else statement ???
												)
											))
											. s_pressure_status_request(cO)
											. (sum p:Pressure.
											(
												r_pressure_status_response(cO, p)
												. ((d2p(d) != p) ->
													s_Set_Pressure(cO, d2p(d))
													. r_Pressure_Confirmed(cO)
												<>
													nop2 % Empty else statement ???
												)
											))
										<>
											((d == dH ) ->
												s_pressure_status_request(cL)
												. (sum p:Pressure.
												(
													r_pressure_status_response(cL, p)
													. ((d2p(d) != p) ->
														s_Set_Pressure(cL, d2p(d))
														. r_Pressure_Confirmed(cL)
													<>
														nop2 % Empty else statement ???
													)
												))
												. s_pressure_status_request(cH)
												. (sum p:Pressure.
												(
													r_pressure_status_response(cH, p)
													. ((d2p(d) != p) ->
														s_Set_Pressure(cH, d2p(d))
														. r_Pressure_Confirmed(cH)
													<>
														nop2 % Empty else statement ???
													)
												))
											<>
												nop3 % Empty else statement ???
											)
										)
									)
								)
							)
						)
						
						. s_door_set_request(d, s)
						. s_Door_Confirmed(d)
						. Door_Controller(d)
					)
				)
			)
		)
	);

	Robot_State_Controller(status: Robot -> Action) = (
		sum r: Robot, a: Action . r_robot_status_request(r) . s_robot_status_response(r, status(r)) . Robot_State_Controller()
		+
		sum r: Robot, a: Action . r_robot_set_request(r, a) . Robot_State_Controller(status[r -> a])
	);

	Robot_Controller(r:Robot) = (
	%	if robot unoccupied ->
	%		if door open -> confirm
	%		else -> set_door open, wait for confirmation of door, confirm move
	%	else break wafer

		sum a:Action, c:Chamber.
		(
			r_Move(r, c, a)
			% Open the required door for the robot
			. s_Set_Door(cr2d(c, r), sO)
			. r_Door_Confirmed(cr2d(c, r))
			. s_Move_Confirmed(r)
			%. s_Set_Door(cr2d(c, r), sC)
			. Robot_Controller(r)
		)
	);

	Wafer_Controller(c:Chamber, ws: WaferStatus) = (

	%cs2c
	%c2c2r
	%c2c2a

	%nc = cs2c(c, ws)
	%a = c2c2a(c, nc)
	%r = c2c2r(c, nc)

	%s_Move(r, c, a)

	%	sum c:Chamber, ws: WaferStatus.
	%	(
			((c == cT && ws == wP) ->
				s_Move(rT, cT, aR)
				. r_Move_Confirmed(rT)
				. s_wafer_out
			<>
				s_Move(c2c2r(c, cs2c(c, ws)), cs2c(c, ws), c2c2a(c, cs2c(c, ws)))
				. r_Move_Confirmed(c2c2r(c, cs2c(c, ws)))
				. Wafer_Controller(cs2c(c, ws), ws)
				%. Wafer_Controller(cT, wP)
			)
	%	)
	);
	
	Wafer_Controller2 = (
		s_Move(rT, cI, aR)
		. r_Move_Confirmed(rT)
		. s_Move(rI, cI, aG)
		. r_Move_Confirmed(rI)
		. s_Move(rI, cH, aR)
		. r_Move_Confirmed(rI)
		. s_Move(rO, cH, aG)
		. r_Move_Confirmed(rO)
		. s_Move(rO, cO, aR)
		. r_Move_Confirmed(rO)
		. s_Move(rT, cO, aG)
		. r_Move_Confirmed(rT)
		. s_wafer_out
	);
	
%	Wafer_Controller3 = (
%		s_Set_Door(dLI, sO)
%		. r_Door_Confirmed(dLI)
%		. s_wafer_out
%		%. s_Set_Door(dLI, sO)
%		%. r_Door_Confirmed(dLI)
%		%. s_Set_Door(dAI, sC)
%		%. r_Door_Confirmed(dAI)
%		%. s_Set_Door(dLI, sC)
%		%. r_Door_Confirmed(dLI)
%	);



	%Transport_Controller(numWafers: Int) = (
	%	((numWafers > 0) ->
	%		Wafer_In . (Wafer_Controller(cT, wN) || Wafer_Controller(cT, wN))
	%		%Wafer_In . (Transport_Controller(numWafers - 1) )%|| Wafer_Controller(cT, wN))
    %
	%	<>
	%		sysFinished %. Transport_Controller(0)
	%	)
	%);


init
	hide({
		%c_door_status_request,
		%c_door_status_response,
		%c_pressure_status_request,
		%c_pressure_status_response,
		%c_robot_status_request,
		%c_robot_status_response,
		nop
	},
	allow({
		nop1,
		nop2,
		nop3,
		nop4,
		nop5,
		nop6,
		nop,
		Yay,
		c_Set_Pressure,
		c_Pressure_Confirmed,
		c_Set_Door,
		c_Door_Confirmed,
		c_Move,
		c_Move_Confirmed,
		Wafer_In,
		Project_wafer,
		s_wafer_out,
		sysFinished,


		%s_door_status_request,
		%s_door_status_response,
		%s_pressure_status_request,
		%s_pressure_status_response,
		%s_robot_status_request,
		%s_robot_status_response,
		c_door_status_request,
		c_door_status_response,
		c_pressure_status_request,
		c_pressure_status_response,
		c_robot_status_request,
		c_robot_status_response,

		c_door_set_request,
		c_pressure_set_request,
		c_robot_set_request

	},
	comm({
		s_Set_Door  				| r_Set_Door 				-> c_Set_Door,
		s_Door_Confirmed  			| r_Door_Confirmed 			-> c_Door_Confirmed,
		s_Set_Pressure  			| r_Set_Pressure 			-> c_Set_Pressure,
		s_Pressure_Confirmed  		| r_Pressure_Confirmed 		-> c_Pressure_Confirmed,
		s_Move 						| r_Move		 			-> c_Move,
		s_Move_Confirmed	  		| r_Move_Confirmed 			-> c_Move_Confirmed,
		s_door_status_request 		| r_door_status_request		-> c_door_status_request,
		s_door_status_response 		| r_door_status_response	-> c_door_status_response,
		s_pressure_status_request 	| r_pressure_status_request	-> c_pressure_status_request,
		s_pressure_status_response 	| r_pressure_status_response-> c_pressure_status_response,
		s_robot_status_request	 	| r_robot_status_request	-> c_robot_status_request,
		s_robot_status_response 	| r_robot_status_response	-> c_robot_status_response,

		s_door_set_request		 	| r_door_set_request		-> c_door_set_request,
		s_pressure_set_request		| r_pressure_set_request	-> c_pressure_set_request,
		s_robot_set_request			| r_robot_set_request		-> c_robot_set_request


	},
    %Transport_Controller(5) ||
	Pressure_State_Controller(pressuresStart) ||
	Pressure_Controller(cI) ||
	Pressure_Controller(cO) ||
	Pressure_Controller(cL) ||
	Pressure_Controller(cH) ||
	Door_State_Controller(doorsStart) ||
	Door_Controller(dAI) ||
	Door_Controller(dAO) ||
	Door_Controller(dLI) ||
	Door_Controller(dLO) ||
	Door_Controller(dH ) ||
	%Robot_State_Controller(actionsStart) ||
	Robot_Controller(rT) ||
	Robot_Controller(rI) ||
	Robot_Controller(rO) ||
	%Wafer_Controller(cT, wN) ||
	%Wafer_Controller(cT, wN) %||
	%Wafer_Controller2 ||
	%Wafer_Controller2 ||
	Wafer_Controller2
	))
);
