sort
	Chamber = struct cI | cO | cL | cH;
	Pressure = struct pA | pL | pH;
	Door = struct dAI | dAO | dLI | dLO | dH;
	Robot = struct rI | rO | rT;
	DoorState = struct sO | sC;
	Action = struct aG | aR;

map
	doorsStart: Door -> DoorState;

	d2p: Door -> Pressure; % get the required pressure for all of the chambers connected to door
	cr2d: Chamber # Robot -> Door; % get the door that needs to open for a robot to perform any action in a chamber
var
	door: Door;

eqn
	doorsStart(door) = sC;

	d2p(dAI) = pA;
	d2p(dAO) = pA;
	d2p(dLI) = pL;
	d2p(dLO) = pL;
	d2p(dH ) = pH;

	cr2d(cI, rI) = dLI;
	cr2d(cI, rT) = dAI;
	cr2d(cO, rO) = dLO;
	cr2d(cO, rT) = dAO;
	cr2d(cH, rI) = dH;
	cr2d(cH, rO) = dH;
	
act
	nop;
	nop3;
	nop4;
	nop5;

	% external actions
%	wafer_in;
	wafer_out;
	wafer_out: Int;

	% communication actions (s = send, r = receive, c = communicate)
	s_door_request, r_door_request, c_door_request: Door # DoorState;
	s_door_confirmed, r_door_confirmed, c_door_confirmed: Door # DoorState;
	s_door_status, r_door_status, c_door_status: Door # DoorState;
	s_door_release, r_door_release, c_door_release: Door;

	s_pressure_request, r_pressure_request, c_pressure_request: Chamber # Pressure;
	s_pressure_confirmed, r_pressure_confirmed, c_pressure_confirmed: Chamber # Pressure;

	s_move_request, r_move_request, c_move_request: Robot # Chamber # Action;
	s_move_confirmed, r_move_confirmed, c_move_confirmed: Robot # Action;

	s_robot_status, r_robot_status, c_robot_status: Robot # Action;
	
	s_chamber_release, r_chamber_release, c_chamber_release: Chamber;

	s_door_set, r_door_set, c_door_set: Door # DoorState;

proc

	pressureController(c:Chamber, status:Pressure) = (
	%	if p == this p -> confirm
	%	elseif doors of this room are closed -> confirm and update pressures
	%	else -> close doors, wait for confirmation of doors, send confirm and update pressures
		
		sum p:Pressure.
		(
			%s_pressure_status(c, status) . pressureController()
			%+
			r_pressure_request(c, p)
			. ((p == status) -> % if p == pstate -> confirm
					s_pressure_confirmed(c, p)
					. pressureController()
			<>
	%			sum d:Door.
	%			(
	%				((d in c2d(c)) ->
	%					askCloseDoor(d)
	%				)
	%			)
					
				(
					((c == cI) ->
						askCloseDoor(dAI)
						. askCloseDoor(dLI)
					)
					+ ((c == cO) ->
						askCloseDoor(dAO)
						. askCloseDoor(dLO)
					)
					+ ((c == cL) ->
						askCloseDoor(dLI)
						. askCloseDoor(dLO)
						. askCloseDoor(dH )
					)
					+ ((c == cH) ->
						askCloseDoor(dH )
					)
				)
				. s_pressure_confirmed(c, p)
				. pressureController(c, p)
			)
		)
	);

	doorStateController(status: Door -> DoorState) = (
		sum d: Door, s: DoorState. 
		(
			s_door_status(d, status(d)) . doorStateController()
		+
			r_door_set(d, s) . doorStateController(status[d -> s])
		)
	);
	
	askSetPressure(d:Door, c:Chamber) = s_pressure_request(c, d2p(d)) . r_pressure_confirmed(c, d2p(d));
	
	askCloseDoor(d:Door) = r_door_status(d, sO) . s_door_request(d, sC) . r_door_confirmed(d, sC) + r_door_status(d, sC);
	
	doorController(d:Door) = (
	%	if door is in requested state -> confirm
	%	elseif door open -> close door, confirm
	%	elseif pressure is correct -> open door, confirm
	%	else -> set pressure, wait for confirm of pressure, open door, confirm

		sum s:DoorState.
		(
			r_door_request(d, s)
			. sum ds:DoorState.
			(
				r_door_status(d, ds)
				. ((ds == s) -> % The door is in the requested state
					nop5
				<>
					((ds == sO) -> % The door is open and must be closed
						s_door_set(d, s)
					<> % The door is closed and must be opened
					
	%					sum c:Chamber.
	%					(					
	%						((c in d2c(d)) ->
	%							askSetPressure(d, c)
	%						)
	%					)
						
						(
							((d == dAI) ->
								askSetPressure(d, cI)
							)
							+
							((d == dAO) ->
								askSetPressure(d, cO)
							)
							+
							((d == dLI) ->
								askSetPressure(d, cI)
								. askSetPressure(d, cL)
							)
							+
							((d == dLO) ->
								askSetPressure(d, cL)
								. askSetPressure(d, cO)
							)
							+
							((d == dH ) ->
								askSetPressure(d, cL)
								. askSetPressure(d, cH)
							)
						)
						. s_door_set(d, s)
					)
				)
			)
			. s_door_confirmed(d, s)
			. ((s == sO) -> 
				r_door_release(d)
			<>
				nop4
			)
			. doorController(d)
		)
	);

	askMove(r:Robot, c:Chamber, a:Action) = (
	
		((r == rT) ->
			s_move_request(r, c, a)
			. r_move_confirmed(r, a)
		<>
			sum as:Action.
			(
				r_robot_status(r, as)
				. ((a == as) ->
					askMove()
				<>
					s_move_request(r, c, a)
					. r_move_confirmed(r, a)
				)
			)
		)
	);

	robotController(r:Robot, status:Action) = (
	%	if robot unoccupied ->
	%		if door open -> confirm
	%		else -> set_door open, wait for confirmation of door, confirm move
	%	else break wafer

		sum a:Action.
		(
			s_robot_status(r, status) . robotController()
			+
			sum c:Chamber.
			(
				r_move_request(r, c, a)
				% Open the required door for the robot
				. s_door_request(cr2d(c, r), sO)
				. r_door_confirmed(cr2d(c, r), sO)
				. s_move_confirmed(r, a)
				. s_door_release(cr2d(c, r))
				. (
					((r == rT && c == cI && a == aR) ->
						r_chamber_release(c)
					)
					+
					((r == rI && c == cI && a == aG) ->
						s_chamber_release(c)
					)
					+
					((r == rI && c == cH && a == aR) ->
						r_chamber_release(c)
					)
					+
					((r == rO && c == cH && a == aG) ->
						s_chamber_release(c)
					)
					+
					((r == rO && c == cO && a == aR) ->
						r_chamber_release(c)
					)
					+
					((r == rT && c == cO && a == aG) ->
						s_chamber_release(c)
					)
				)
				. robotController(r, a)
			)
		)
	);
	
	waferController = (
%		wafer_in
		askMove(rT, cI, aR)
		. askMove(rI, cI, aG)
		. askMove(rI, cH, aR)
		. askMove(rO, cH, aG)
		. askMove(rO, cO, aR)
		. askMove(rT, cO, aG)
		. wafer_out
		%. waferController
	);
	
	waferController(i:Int) = (
%		wafer_in
		askMove(rT, cI, aR)
		. askMove(rI, cI, aG)
		. askMove(rI, cH, aR)
		. askMove(rO, cH, aG)
		. askMove(rO, cO, aR)
		. askMove(rT, cO, aG)
		. wafer_out(i)
		%. waferController(i)
	);

	transportController = (
		waferController || waferController %|| waferController %|| waferController %|| waferController
%		. system_finished
	);
	
	transportController1 = (
		waferController(0) || waferController(1) %|| waferController %|| waferController %|| waferController
%		. system_finished
	);

init
hide(
	{
		%c_door_status,
		%%c_pressure_status,
		%c_robot_status,
		%c_door_set,
		nop
	},
	allow(
		{
			nop,
			nop3,
			nop4,
			nop5,
			c_pressure_request,
			c_pressure_confirmed,
			c_door_request,
			c_door_confirmed,
			c_move_request,
			c_move_confirmed,
%			wafer_in,
	%		project_wafer,
			wafer_out,
%			system_finished,

			c_door_status,
			%c_pressure_status,
			c_robot_status,

			c_door_set,
			c_door_release,
			c_chamber_release

		},
		comm(
			{
				s_door_request  		| r_door_request 		-> c_door_request,
				s_door_confirmed  		| r_door_confirmed 		-> c_door_confirmed,
				s_pressure_request  	| r_pressure_request 	-> c_pressure_request,
				s_pressure_confirmed  	| r_pressure_confirmed 	-> c_pressure_confirmed,
				s_move_request 			| r_move_request		-> c_move_request,
				s_move_confirmed	  	| r_move_confirmed 		-> c_move_confirmed,
				s_door_status 			| r_door_status			-> c_door_status,
				s_robot_status 			| r_robot_status		-> c_robot_status,

				s_door_set		 		| r_door_set			-> c_door_set,
				s_door_release	 		| r_door_release		-> c_door_release,
				s_chamber_release	 	| r_chamber_release		-> c_chamber_release

			},
			pressureController(cI, pA) ||
			pressureController(cO, pL) ||
			pressureController(cL, pL) ||
			pressureController(cH, pH) ||
			doorStateController(doorsStart) ||
			doorController(dAI) ||
			doorController(dAO) ||
			doorController(dLI) ||
			doorController(dLO) ||
			doorController(dH ) ||
			robotController(rT, aR) ||
			robotController(rI, aR) ||
			robotController(rO, aR) ||
			transportController1
		)
	)
);