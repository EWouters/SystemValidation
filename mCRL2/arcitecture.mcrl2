sort
	Chamber = struct cI | cO | cL | cH;
	Pressure = struct pA | pL | pH;
	Door = struct dAI | dAO | dLI | dLO | dH;
	Robot = struct rI | rO | rT;
	DoorState = struct sO | sC;
	Action = struct aG | aR;

map
	chambersStart: Door -> Bool;

	d2p: Door -> Pressure; % get the required pressure for all of the chambers connected to door
	cr2d: Chamber # Robot -> Door; % get the door that needs to open for a robot to perform any action in a chamber

var
	door: Door;

eqn
	chambersStart(door) = true;

	d2p(dAI) = pA;
	d2p(dAO) = pA;
	d2p(dLI) = pL;
	d2p(dLO) = pL;
	d2p(dH ) = pH;

	cr2d(cI, rT) = dAI;
	cr2d(cO, rT) = dAO;
	cr2d(cI, rI) = dLI;
	cr2d(cO, rO) = dLO;
	cr2d(cH, rI) = dH;
	cr2d(cH, rO) = dH;

	% For model checking:
	cr2d(cL, rO) = dLO;
	cr2d(cI, rO) = dLI;
	cr2d(cL, rI) = dLI;
	cr2d(cH, rT) = dH;
	cr2d(cL, rT) = dLI;
	cr2d(cO, rI) = dLO;

act
	nop;
	
	% external actions
	wafer_in;
	project_wafer;
	wafer_out;
	system_finished;
	invalid_pressure;
	
	% status messages
	door_state:		Door # DoorState;
	pressure_state:	Chamber # Pressure;
	robot_state: 		Robot # Action;

	% communication actions (s = send, r = receive, c = communicate)
	s_wafer_in,  r_wafer_in;
	s_wafer_out, r_wafer_out;
	
	s_door_request,			r_door_request,			c_door_request:		Door # DoorState;
	s_door_confirmed,		r_door_confirmed,		c_door_confirmed:	Door # DoorState;
	s_door_release, 		r_door_release, 		c_door_release: 	Door # DoorState;
	
	s_pressure_request, 	r_pressure_request,		c_pressure_request:		Chamber # Pressure;
	s_pressure_confirmed,	r_pressure_confirmed,	c_pressure_confirmed:	Chamber # Pressure;
	s_pressure_release, 	r_pressure_release,		c_pressure_release:		Chamber # Pressure;
	
	s_path_free,			r_path_free,			c_path_free: 		Door;
	s_path_occupied,		r_path_occupied,		c_path_occupied:	Door;
	s_path_request,			r_path_request,			c_path_request: 	Door;
	s_path_release,			r_path_release,			c_path_release: 	Door;

	s_move_request, 		r_move_request,			c_move_request:		Robot # Chamber # Action;
	s_move_confirmed, 		r_move_confirmed,		c_move_confirmed:	Robot # Chamber # Action;
	
proc
	
	doorController_test(d:Door) = (
		sum ds:DoorState. r_door_request(d, ds) . s_door_confirmed(d, ds) . r_door_release(d, ds) . doorController_test()
	);
	
	doorController(d:Door, ds:DoorState) = (
		door_state(d, ds) . doorController() +
		sum ds':DoorState.(
			r_door_request(d, ds') . (
			(d == dAI && ds == sC && ds' == sO) -> Do_Pressure(cI, pA) . s_door_confirmed(d, sO) . r_door_release(d, ds') . doorController(d, ds') + 
			(d == dLI && ds == sC && ds' == sO) -> Do_Pressure(cL, pL) . s_door_confirmed(d, sO) . r_door_release(d, ds') . doorController(d, ds') + 
			(d == dAO && ds == sC && ds' == sO) -> Do_Pressure(cO, pA) . s_door_confirmed(d, sO) . r_door_release(d, ds') . doorController(d, ds') + 
			(d == dLO && ds == sC && ds' == sO) -> Do_Pressure(cO, pL) . s_door_confirmed(d, sO) . r_door_release(d, ds') . doorController(d, ds') + 
			(d == dH  && ds == sC && ds' == sO) -> Do_Pressure(cL, pH) . s_door_confirmed(d, sO) . r_door_release(d, ds') . doorController(d, ds') + 
			(!(ds == sC && ds' == sO)) -> s_door_confirmed(d, ds') . r_door_release(d, ds') . doorController(d, ds') )

			
		%  (ds == sC && ds' == sO) -> sum c:Chamber.(Do_Pressure(c, d2p(d))) . s_door_confirmed(d, sO) . r_door_release(d, ds') . doorController(d, ds') + 
			
		)
	);
	
	Do_Pressure(c:Chamber, p:Pressure) = (
		s_pressure_request(c, p) . r_pressure_confirmed(c, p) . s_pressure_release(c, p)
	);

	pressureController(c:Chamber, p:Pressure) = (
	% For each chamber a pressure controler exists.
	% It recieves an r_pressure_request(c, p').
	%	It will do the nessecary steps to reach an s_pressure_confirmed(c, p')

	%	if p == this p -> confirm
	%	elseif doors of this room are closed -> confirm and update pressures
	%	else -> close doors, wait for confirmation of doors, send confirm and update pressures
		pressure_state(c, p) . pressureController() + 

		sum p':Pressure.(
			(c == cI) -> r_pressure_request(c, pA) . s_door_request(dLI, sC) . r_door_confirmed(dLI, sC) . s_pressure_confirmed(c, pA) . r_pressure_release(c, pA) . s_door_release(dLI, sC) . pressureController(c, pA) +
			(c == cI) -> r_pressure_request(c, pL) . s_door_request(dAI, sC) . r_door_confirmed(dAI, sC) . s_pressure_confirmed(c, pL) . r_pressure_release(c, pL) . s_door_release(dAI, sC) . pressureController(c, pL) +
			(c == cI) -> r_pressure_request(c, pH) . invalid_pressure + 
			
			(c == cL) -> r_pressure_request(c, pA) . invalid_pressure + 
			(c == cL) -> r_pressure_request(c, pL) . s_door_request(dH , sC) . r_door_confirmed(dH , sC) . s_pressure_confirmed(c, pL) . r_pressure_release(c, pL) . s_door_release(dH , sC) . pressureController(c, pL) +
			(c == cL) -> r_pressure_request(c, pH) . s_door_request(dLI, sC) . r_door_confirmed(dLI, sC) 
												   . s_door_request(dLO, sC) . r_door_confirmed(dLO, sC) . s_pressure_confirmed(c, pH) . r_pressure_release(c, pH) . s_door_release(dLI, sC)
												   .																												 s_door_release(dLO, sC) . pressureController(c, pH) + 
			(c == cH) -> r_pressure_request(c, pA) . invalid_pressure + 
			(c == cH) -> r_pressure_request(c, pL) . invalid_pressure + 
			(c == cH) -> r_pressure_request(c, pH) . s_door_request(dH , sC) . r_door_confirmed(dH , sC) . s_pressure_confirmed(c, pH) . r_pressure_release(c, pH) . s_door_release(dH , sC) . pressureController(c, pH) + 
			
			(c == cO) -> r_pressure_request(c, pA) . s_door_request(dLO, sC) . r_door_confirmed(dLO, sC) . s_pressure_confirmed(c, pA) . r_pressure_release(c, pA) . s_door_release(dLO, sC) . pressureController(c, pA) +
			(c == cO) -> r_pressure_request(c, pL) . s_door_request(dAO, sC) . r_door_confirmed(dAO, sC) . s_pressure_confirmed(c, pL) . r_pressure_release(c, pL) . s_door_release(dAO, sC) . pressureController(c, pL) + 
			(c == cO) -> r_pressure_request(c, pH) . invalid_pressure
			
		)

	);
	
	pathController(d:Door) = ( %status: Door -> Bool) = (
		r_path_request(d) . r_path_release(d) . pathController()
	);

	robotController(r:Robot, a:Action) = (
	% For each robot a robot controller exists. It has an action which is either Grab (aG) when it has a wafer or Release (aR) when it has no wafer.

	%	if robot unoccupied ->
	%		if door open -> confirm
	%		else -> set_door open, wait for confirmation of door, confirm move
	%	else break wafer
		robot_state(r, a) . robotController() +
		sum a':Action, c:Chamber.(
			(r == rT && c == cI && a' == aR) -> 
				r_move_request(r, c, a') . s_path_request(dAI) . 
				Do_Move(r, c, a') + % wafer_in
			(r == rI && c == cI && a' == aG && a == aR) -> 
				r_move_request(r, c, a') . s_path_request(dLI) . 
				Do_Move(r, c, a') . s_path_release(dAI) +
			(r == rI && c == cH && a' == aR && a == aG) ->
				r_move_request(r, c, a') . s_path_request(dH ) . 
				Do_Move(r, c, a') . s_path_release(dLI) +
			(r == rO && c == cH && a' == aG && a == aR) ->
				r_move_request(r, c, a') . s_path_request(dLO) . 
				Do_Move(r, c, a') . s_path_release(dH ) +
			(r == rO && c == cO && a' == aR && a == aG) ->
				r_move_request(r, c, a') . s_path_request(dAO) . 
				Do_Move(r, c, a') . s_path_release(dLO) +
			(r == rT && c == cO && a' == aG) ->
				r_move_request(r, c, a') . 
				Do_Move(r, c, a') . s_path_release(dAO)
		) . robotController(r, a')
	);
	
	Do_Move(r:Robot, c:Chamber, a:Action) = (
		s_door_request(cr2d(c, r), sO)
		. r_door_confirmed(cr2d(c, r), sO)
		. s_move_confirmed(r, c, a)
		. s_door_release(cr2d(c, r), sO)
	);

	waferForwarder = (
		r_wafer_in . 
		s_move_request(rT, cI, aR) . r_move_confirmed(rT, cI, aR) . 
		s_move_request(rI, cI, aG) . r_move_confirmed(rI, cI, aG) . 
		s_move_request(rI, cH, aR) . r_move_confirmed(rI, cH, aR) . 
		project_wafer . 
		s_move_request(rO, cH, aG) . r_move_confirmed(rO, cH, aG) . 
		s_move_request(rO, cO, aR) . r_move_confirmed(rO, cO, aR) . 
		s_move_request(rT, cO, aG) . r_move_confirmed(rT, cO, aG) . 
		s_wafer_out . 
		waferForwarder
	);
	
	waferController(n:Int) = (
		waferControllerIn(n) || waferControllerOut(n)
	);
	
	waferControllerIn(n:Int) = (
		(n > 0) -> s_wafer_in . waferControllerIn(n-1)
	);
	
	waferControllerOut(n:Int) = (
		(n > 0) -> r_wafer_out . waferControllerOut(n-1) +
		(n == 0) -> system_finished . waferControllerOut()
	);

	transportController = (
		waferForwarder %|| waferForwarder %|| waferForwarder %|| waferForwarder %|| waferForwarder
	);

init
hide(
	{
		nop
	},
	allow(
		{
			wafer_in,
			project_wafer,
			wafer_out,
			system_finished,
			invalid_pressure,
			
			%door_state,
			%pressure_state,
			%robot_state,
			
			c_door_request,
			c_door_confirmed,
			c_door_release,
			
			c_pressure_request,
			c_pressure_confirmed,
			c_pressure_release,
			
			c_path_free,
			c_path_occupied,
			c_path_request,
			c_path_release,
			
			c_move_request,
			c_move_confirmed
			
		},
		comm(
			{
				s_wafer_in 	| r_wafer_in	-> wafer_in,
				s_wafer_out | r_wafer_out	-> wafer_out,
				
				s_door_request  		| r_door_request 		-> c_door_request,
				s_door_confirmed  		| r_door_confirmed 		-> c_door_confirmed,
				s_door_release	 		| r_door_release		-> c_door_release,
				
				s_pressure_request  	| r_pressure_request 	-> c_pressure_request,
				s_pressure_confirmed  	| r_pressure_confirmed 	-> c_pressure_confirmed,
				s_pressure_release  	| r_pressure_release 	-> c_pressure_release,
				
				s_path_free				| r_path_free			-> c_path_free,
				s_path_occupied			| r_path_occupied		-> c_path_occupied,
				s_path_request			| r_path_request		-> c_path_request,
				s_path_release			| r_path_release		-> c_path_release,
				
				s_move_request 			| r_move_request		-> c_move_request,
				s_move_confirmed	  	| r_move_confirmed 		-> c_move_confirmed

			},
			waferController(2) ||
			transportController ||
			
			doorController(dAI, sC) ||
			doorController(dAO, sC) ||
			doorController(dLI, sC) ||
			doorController(dLO, sC) ||
			doorController(dH , sC) ||
			
			pressureController(cI, pA) ||
			pressureController(cO, pL) ||
			pressureController(cL, pL) ||
			pressureController(cH, pH) ||
			
			pathController(dAI) ||
			pathController(dAO) ||
			pathController(dLI) ||
			pathController(dLO) ||
			pathController(dH ) ||
			
			robotController(rT, aR) ||
			robotController(rI, aR) ||
			robotController(rO, aR)
		)
	)
);
