% #1

% Any door in the wafer stepper can only open if the pressure on both sides of the door is equal.

% No rooms will opperate at an invalid pressure (this simplifies the formulae)
[true* . invalid_pressure]false &&

% If the pressure in cI is pL, and it has not been set to pA subsequently, dAI cannot open
[true* . c_pressure_confirmed(cI, pL) . (!c_pressure_confirmed(cI, pA))* . c_door_confirmed(dAI, sO)]false &&
% If the pressure in cO is pL, and it has not been set to pA subsequently, dAO cannot open
[true* . c_pressure_confirmed(cO, pL) . (!c_pressure_confirmed(cO, pA))* . c_door_confirmed(dAO, sO)]false &&
% If the pressure in cL is pH, and it has not been set to pL subsequently, dLI and dLO cannot open
[true* . c_pressure_confirmed(cL, pH) . (!c_pressure_confirmed(cL, pL))* . (c_door_confirmed(dLI, sO) || c_door_confirmed(dLO, sO))]false &&
%[true* . c_pressure_confirmed(cL, pH) . (!c_pressure_confirmed(cL, pL))* . c_door_confirmed(dLI, sO)]false &&
%[true* . c_pressure_confirmed(cL, pH) . (!c_pressure_confirmed(cL, pL))* . c_door_confirmed(dLO, sO)]false &&
% If the pressure in cL is pL, and it has not been set to pH subsequently, dH cannot open
[true* . c_pressure_confirmed(cL, pL) . (!c_pressure_confirmed(cL, pH))* . c_door_confirmed(dH , sO)]false

% Test cases:
%c_pressure_confirmed(cI, pA) . c_pressure_confirmed(cI, pL) . c_door_confirmed(dAI, sO) % Test case false
%c_pressure_confirmed(cI, pA) . c_pressure_confirmed(cI, pA) . c_door_confirmed(dAI, sO) % Test case true
%c_pressure_confirmed(cI, pA) . c_door_confirmed(dAI, sO) % Test case true

%c_pressure_confirmed(cI, pL) . c_pressure_confirmed(cI, pA) . c_door_confirmed(dLI, sO) % Test case true
%c_pressure_confirmed(cL, pA)  % Test case false

%c_pressure_confirmed(cL, pH) . c_pressure_confirmed(cL, pL) . c_door_confirmed(dLI, sO)  % Test case true
%c_pressure_confirmed(cL, pH) . c_pressure_confirmed(cL, pL) . c_door_confirmed(dLO, sO)  % Test case true

%c_pressure_confirmed(cO, pH) . c_door_confirmed(dAI, sO) . c_pressure_confirmed(cI, pA) % Test case false
%c_pressure_confirmed(cO, pH) . c_pressure_confirmed(cI, pA) . c_door_confirmed(dAI, sO) % Test case true

&&
% #2

% Any sluice can have at most one door open at a time.

% After dAI opens dLI cannot open without dAI closing in between
[true* . c_door_confirmed(dAI, sO) . (!c_door_confirmed(dAI, sC))* . c_door_confirmed(dLI, sO)]false &&
% After dLI opens dAI cannot open without dLI closing in between
[true* . c_door_confirmed(dLI, sO) . (!c_door_confirmed(dLI, sC))* . c_door_confirmed(dAI, sO)]false &&
% After dAO opens dLO cannot open without dAO closing in between
[true* . c_door_confirmed(dAO, sO) . (!c_door_confirmed(dAO, sC))* . c_door_confirmed(dLO, sO)]false &&
% After dLO opens dAO cannot open without dLO closing in between
[true* . c_door_confirmed(dLO, sO) . (!c_door_confirmed(dLO, sC))* . c_door_confirmed(dAO, sO)]false

% Test cases:
% c_door_confirmed(dAI, sO) . c_door_confirmed(dAI, sC) . c_door_confirmed(dLI, sO) % Test case true
% c_door_confirmed(dAI, sO) . c_door_confirmed(dLI, sO) % Test case false

% c_door_confirmed(dAO, sO) . c_door_confirmed(dAO, sC) . c_door_confirmed(dLO, sO) % Test case true
% c_door_confirmed(dAO, sO) . c_door_confirmed(dLO, sO) % Test case false

&&
% #3

% The low vacuum chamber can either have the door to the high vacuum chamber open or the door(s) to the sluice(s).

% Weakest form but sufficient:
% After dLI opens dH  cannot open without dLI closing in between
[true* . c_door_confirmed(dLI, sO) . (!c_door_confirmed(dLI, sC))* . c_door_confirmed(dH , sO)]false &&
% After dH  opens dLI cannot open without dH  closing in between
[true* . c_door_confirmed(dH , sO) . (!c_door_confirmed(dH , sC))* . c_door_confirmed(dLI, sO)]false &&
% After dLO opens dH  cannot open without dLO closing in between
[true* . c_door_confirmed(dLO, sO) . (!c_door_confirmed(dLO, sC))* . c_door_confirmed(dH , sO)]false &&
% After dH  opens dLO cannot open without dH  closing in between
[true* . c_door_confirmed(dH , sO) . (!c_door_confirmed(dH , sC))* . c_door_confirmed(dLO, sO)]false

% Stronger form, also checks that the door to the ambient pressure is not opened:
% After dLI opens dAI and dH cannot open without dLI closing in between
%[true* . c_door_confirmed(dLI, sO) . (!c_door_confirmed(dLI, sC))* . (c_door_confirmed(dAI, sO) || c_door_confirmed(dH, sO))]false &&
% After dLO opens dAO and dH cannot open without dLO closing in between
%[true* . c_door_confirmed(dLO, sO) . (!c_door_confirmed(dLO, sC))* . (c_door_confirmed(dAO, sO) || c_door_confirmed(dH, sO))]false &&

% Too strong, does not allow both dLI and dLO to be opened at the same time:
% After dLI opens dAI, dAO and dH cannot open without dLI closing in between
%[true* . c_door_confirmed(dLI, sO) . (!c_door_confirmed(dLI, sC))* . (c_door_confirmed(dAI, sO) || c_door_confirmed(dAO, sO) || c_door_confirmed(dH, sO))]false &&
% After dLO opens dAI, dAO and dH cannot open without dLO closing in between
%[true* . c_door_confirmed(dLO, sO) . (!c_door_confirmed(dLO, sC))* . (c_door_confirmed(dAI, sO) || c_door_confirmed(dAO, sO) || c_door_confirmed(dH, sO))]false

% Test cases:
% c_door_confirmed(dLI, sO) . c_door_confirmed(dLI, sC) . c_door_confirmed(dAI, sO) % Test case true
% c_door_confirmed(dLI, sO) . c_door_confirmed(dLI, sC) . c_door_confirmed(dH, sO) % Test case true
% c_door_confirmed(dLI, sO) . c_door_confirmed(dH, sO) % Test case false
% c_door_confirmed(dLI, sO) . c_door_confirmed(dAI, sO) % Test case false

% c_door_confirmed(dLI, sO) . c_door_confirmed(dLO, sO) % Test case true
% c_door_confirmed(dLI, sO) . c_door_confirmed(dLO, sO) . c_door_confirmed(dLI, sC) . c_door_confirmed(dLO, sC) . c_door_confirmed(dH , sO) % Test case true
% c_door_confirmed(dLI, sO) . c_door_confirmed(dLO, sO) . c_door_confirmed(dH , sO) % Test case false
% c_door_confirmed(dLI, sO) . c_door_confirmed(dLO, sO) . c_door_confirmed(dLO, sC) . c_door_confirmed(dH , sO) % Test case false

% c_door_confirmed(dLO, sO) . c_door_confirmed(dLO, sC) .c_door_confirmed(dAO, sO) % Test case true
% c_door_confirmed(dLO, sO) . c_door_confirmed(dLO, sC) .c_door_confirmed(dH, sO) % Test case true
% c_door_confirmed(dLO, sO) . c_door_confirmed(dAO, sO) % Test case false
% c_door_confirmed(dLO, sO) . c_door_confirmed(dH, sO) % Test case false

&&
% #4

% There can be only one wafer at a time in each sluice.

% After rT puts a wafer in cI, rT cannot put an other wafer in cI without rI taking the wafer from cI in between
[true* . c_move_confirmed(rT, cI, aR) . (!c_move_confirmed(rI, cI, aG))* . c_move_confirmed(rT, cI, aR)]false &&
% After rO puts a wafer in cO, rO cannot put an other wafer in cO without rT taking the wafer from cO in between
[true* . c_move_confirmed(rO, cO, aR) . (!c_move_confirmed(rT, cO, aG))* . c_move_confirmed(rO, cO, aR)]false

% Test cases:
% c_move_confirmed(rO, cO, aR) . c_move_confirmed(rT, cO, aG) . c_move_confirmed(rO, cO, aR) % Test case true
% c_move_confirmed(rT, cI, aR) . c_move_confirmed(rI, cI, aG) . c_move_confirmed(rT, cI, aR) % Test case true

% c_move_confirmed(rT, cI, aR) . c_move_confirmed(rT, cI, aR) % Test case false
% c_move_confirmed(rO, cO, aR) . c_move_confirmed(rO, cO, aR) % Test case false

&&
% #5

% There can be only two wafers at a time in the low vacuum chamber.

% After rI picks up a wafer in cI, rI cannot pick up an other wafer in cI without rI releasing the wafer in cH in between
[true* . c_move_confirmed(rI, cI, aG) . (!c_move_confirmed(rI, cH, aR))* . c_move_confirmed(rI, cI, aG)]false &&
% After rO picks up a wafer in cH, rO cannot pick up an other wafer in cH without rI releasing the wafer in cO in between
[true* . c_move_confirmed(rO, cH, aG) . (!c_move_confirmed(rO, cO, aR))* . c_move_confirmed(rO, cH, aG)]false

% Test cases:
% c_move_confirmed(rI, cL, aR) . c_move_confirmed(rI, cL, aG) . c_move_confirmed(rI, cL, aR) % Test case true
% c_move_confirmed(rO, cL, aR) . c_move_confirmed(rO, cL, aG) . c_move_confirmed(rO, cL, aR) % Test case true

% c_move_confirmed(rI, cL, aR) . c_move_confirmed(rI, cL, aR) % Test case false
% c_move_confirmed(rO, cL, aR) . c_move_confirmed(rO, cL, aR) % Test case false

&&
% #6

% There can be only one wafer at a time in the high vacuum chamber.

% After rI puts a wafer in cH, rI cannot put an other wafer in cH without rO taking the wafer from cH in between
[true* . c_move_confirmed(rI, cH, aR) . (!c_move_confirmed(rO, cH, aG))* . c_move_confirmed(rI, cH, aR)]false

% Test cases:
% c_move_confirmed(rI, cH, aR) . c_move_confirmed(rO, cH, aG) . c_move_confirmed(rI, cH, aR)  % Test case true

% c_move_confirmed(rI, cH, aR) . c_move_confirmed(rI, cH, aR)  % Test case false

&&
% #7

% When a wafer enters the wafer stepper it must always exit after being measured and processed.

% This requirement has two parts, one is that all wafers that enter must exit, the second is that it must be measured and processed before it exits. Due to the paralelism in our architecture we cannot guarantee that each wafer is processed and measured. What we can do is guarantee that the same number of enter, process and exit actions occur. In a similar way it is also not possible to guarantee that each individual wafer exits, because of our design dicision to process (not the best word) the wafers in parallel and to not give them an id.

%nu X(w:Int=0).val(w>=0) && [!(wafer_in || wafer_out)]X(w) && [wafer_in]X(w+1) && [wafer_out]X(w-1) &&
%  mu Y(w':Int=w).(val(w'==0) || ([!(wafer_in || wafer_out)]Y(w') && [wafer_in]Y(w'+1) && [wafer_out]Y(w'-1) && <true>true))

%nu X(n:Int=0).([!(wafer_in || wafer_out)]X(n) && [wafer_in]X(n+1) && [wafer_out]X(n-1) &&
%  mu Y(m:Int=n).(val(m>=0) || ([!(wafer_in || wafer_out)]Y(m) && [wafer_in]Y(m+1) && [wafer_out]Y(m-1)) && <true>true))

(nu X(p:Int=0).val(p>=0) && [!(wafer_in || project_wafer)]X(p) && [wafer_in]X(p+1) && [project_wafer]X(p-1) &&
  mu Y(p':Int=p).(val(p'==0) || ([!(wafer_in || project_wafer)]Y(p') && [wafer_in]Y(p'+1) && [project_wafer]Y(p'-1) && <true>true)))
 &&
(nu X(s:Int=0).val(s>=0) && [!(project_wafer || wafer_out)]X(s) && [project_wafer]X(s+1) && [wafer_out]X(s-1) &&
  mu Y(s':Int=s).(val(s'==0) || ([!(project_wafer || wafer_out)]Y(s') && [project_wafer]Y(s'+1) && [wafer_out]Y(s'-1) && <true>true)))

% Not working:
%nu X(w:Int=0,p:Int=0).val(w>=0) && val(p>=0) && val(p>=w) && [!(wafer_in || wafer_out || project_wafer)]X(w, p) && [wafer_in]X(w+1, p+1) && [wafer_out]X(w-1, p) && [project_wafer]X(w, p-1) &&
%  mu Y(w':Int=w,p':Int=p).((val(w'==0) && val(p'==0)) || ([!(wafer_in || wafer_out || project_wafer)]Y(w', p') && [wafer_in]Y(w'+1, p'+1) && [wafer_out]Y(w'-1, p') && [project_wafer]X(w', p'-1) && <true>true))

% Test cases:
%wafer_in . project_wafer . wafer_out % Test case true
%wafer_in . project_wafer . wafer_in . project_wafer . wafer_out . wafer_out % Test case true
%wafer_in . project_wafer . wafer_in . wafer_out . project_wafer . wafer_out % Test case true
%wafer_in . project_wafer . wafer_out . wafer_in . project_wafer . wafer_out % Test case true

%wafer_in . wafer_out . wafer_in . wafer_out % Test case false
%wafer_in . wafer_in . wafer_out . wafer_out % Test case false
%wafer_in . wafer_in . wafer_out . wafer_out % Test case false

%wafer_in . wafer_out . wafer_out % Test case false
%wafer_in . wafer_in . wafer_out % Test case false

%wafer_in % Test case false
%wafer_out % Test case false
%project_wafer % Test case false

%wafer_in . wafer_out . project_wafer . wafer_in . wafer_out % Test case false
%wafer_in . project_wafer . wafer_out . project_wafer . wafer_in . wafer_out % Test case false
%project_wafer . wafer_in . wafer_out % Test case false
%wafer_in . wafer_out . project_wafer % Test case false

&&
% #8

% When a door opens a wafer must go through before it closes.

%[true*.c_door_confirmed(dAI, sO).forall a:Action.(!c_move_confirmed(rT, cI, a))*.c_door_confirmed(dAI, sC)]false && % dAI
%[true*.c_door_confirmed(dLI, sO).forall a:Action.(!c_move_confirmed(rI, cI, a))*.c_door_confirmed(dLI, sC)]false && % dLI
%%[true*.c_door_confirmed(dH , sO).forall a:Action.(!c_move_confirmed(rI, cH, a))*.c_door_confirmed(dH , sC)]false && % dH, rI
%%[true*.c_door_confirmed(dH , sO).forall a:Action.(!c_move_confirmed(rO, cH, a))*.c_door_confirmed(dH , sC)]false && % dH, rO
%[true*.c_door_confirmed(dH , sO).forall a:Action.(!(c_move_confirmed(rI, cH, a) || c_move_confirmed(rO, cH, a) ))*.c_door_confirmed(dH , sC)]false && % dH, rI & rO
%[true*.c_door_confirmed(dLO, sO).forall a:Action.(!c_move_confirmed(rO, cO, a))*.c_door_confirmed(dLO, sC)]false && % dLO
%[true*.c_door_confirmed(dAO, sO).forall a:Action.(!c_move_confirmed(rT, cO, a))*.c_door_confirmed(dAO, sC)]false    % dAO

% is equivalent to:
[true*.c_door_confirmed(cr2d(cI, rT), sO).forall a:Action.(!c_move_confirmed(rT, cI, a))*.c_door_confirmed(cr2d(cI, rT), sC)]false && % dAI
[true*.c_door_confirmed(cr2d(cI, rI), sO).forall a:Action.(!c_move_confirmed(rI, cI, a))*.c_door_confirmed(cr2d(cI, rI), sC)]false && % dLI
%[true*.c_door_confirmed(cr2d(cH, rI), sO).forall a:Action.(!c_move_confirmed(rI, cH, a))*.c_door_confirmed(cr2d(cH, rI), sC)]false && % dH, rI
%[true*.c_door_confirmed(cr2d(cH, rO), sO).forall a:Action.(!c_move_confirmed(rO, cH, a))*.c_door_confirmed(cr2d(cH, rO), sC)]false && % dH, rO
[true*.c_door_confirmed(cr2d(cH, rO), sO).forall a:Action.(!(c_move_confirmed(rI, cH, a) || c_move_confirmed(rO, cH, a) ))*.c_door_confirmed(cr2d(cH, rO), sC)]false && % dH, rI & rO
[true*.c_door_confirmed(cr2d(cO, rO), sO).forall a:Action.(!c_move_confirmed(rO, cO, a))*.c_door_confirmed(cr2d(cO, rO), sC)]false && % dLO
[true*.c_door_confirmed(cr2d(cO, rT), sO).forall a:Action.(!c_move_confirmed(rT, cO, a))*.c_door_confirmed(cr2d(cO, rT), sC)]false    % dAO

%forall c:Chamber,r:Robot,a:Action.[true*.c_door_confirmed(cr2d(c, r), sO).(!c_move_confirmed(r, c, a))*.c_door_confirmed(cr2d(c, r), sC)]false % all doors

% Test cases:
% c_door_confirmed(cr2d(cI, rI), sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(cr2d(cI, rI), sC) % Test case true
% c_door_confirmed(cr2d(cI, rI), sO) . c_move_confirmed(rI, cH, aR) . c_door_confirmed(cr2d(cI, rI), sC) % Test case false

%c_door_confirmed(dAI, sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(dAI, sC) % Test case true
%c_door_confirmed(dAI, sO) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(dAI, sC) % Test case true
%c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(dLI, sC) % Test case true
%c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(dLI, sC) % Test case true
%c_door_confirmed(dH , sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(dH , sC) % Test case true
%c_door_confirmed(dH , sO) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(dH , sC) % Test case true
%c_door_confirmed(dLO, sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(dLO, sC) % Test case true
%c_door_confirmed(dLO, sO) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(dLO, sC) % Test case true
%c_door_confirmed(dAO, sO) . c_move_confirmed(rO, cO, aG) . c_door_confirmed(dAO, sC) % Test case true
%c_door_confirmed(dAO, sO) . c_move_confirmed(rO, cO, aR) . c_door_confirmed(dAO, sC) % Test case true

%c_door_confirmed(dAI, sO) . c_door_confirmed(dAI, sC) % Test case false
%c_door_confirmed(dLI, sO) . c_door_confirmed(dLI, sC) % Test case false
%c_door_confirmed(dH , sO) . c_door_confirmed(dH , sC) % Test case false
%c_door_confirmed(dLO, sO) . c_door_confirmed(dLO, sC) % Test case false
%c_door_confirmed(dAO, sO) . c_door_confirmed(dAO, sC) % Test case false

%c_door_confirmed(dAI, sO) . c_move_confirmed(rI, cH, aR) . c_door_confirmed(dAI, sC) % Test case false
%c_door_confirmed(dAI, sO) . c_move_confirmed(rT, cI, aR) . c_door_confirmed(dAI, sC) % Test case false
%c_door_confirmed(dAI, sO) . c_move_confirmed(rO, cO, aR) . c_door_confirmed(dAI, sC) % Test case false

% c_door_confirmed(cr2d(cI, rI), sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(cr2d(cI, rI), sO) % Test case true
% c_door_confirmed(cr2d(cO, rO), sO) . c_move_confirmed(rO, cO, aR) . c_door_confirmed(cr2d(cO, rO), sO) % Test case true
% c_door_confirmed(cr2d(cI, rI), sO) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(cr2d(cI, rI), sO) % Test case true

% c_door_confirmed(cr2d(cI, rI), sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(cr2d(cI, rI), sC) % Test case true
% c_door_confirmed(cr2d(cI, rI), sC) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(cr2d(cI, rI), sO) % Test case true

&&
% #9

% Robots cannot be instructed such that they collide.

% Because the multi-action c_move_confirmed|c_move_confirmed is not allowed, this cannot happen. 
% We can however also require dH to close between rI releasing a wafer in cH and rO taking the wafer from cH.
% And require dH to close between rO taking a wafer from cH and rI putting a wafer in cH.

[true* . c_move_confirmed(rI, cH, aR) . (!c_door_confirmed(dH , sC))* . c_move_confirmed(rO, cH, aG)]false %&&

% Too strong:
%[true* . c_move_confirmed(rO, cH, aG) . (!c_door_confirmed(dH , sC))* . c_move_confirmed(rI, cH, aR)]false

&&
% #10

% Robots cannot be instructed to push a wafer through a closed door.

forall c:Chamber,r:Robot,a:Action.
% A robot move can only happen after a door open has happened
[(!c_door_confirmed(cr2d(c, r), sO))*.c_move_confirmed(r, c, a)]false &&
% Between a door_close and a robot_move a door_open must happen
[true* . c_door_confirmed(cr2d(c, r), sC) . (!c_door_confirmed(cr2d(c, r), sO))* . c_move_confirmed(r, c, a)]false

% Test cases:
% c_door_confirmed(dLI, sC) . c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aG) % Test case true
% c_door_confirmed(dLI, sC) . c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aR) % Test case true
% c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(dLI, sO) % Test case true
% c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(dLI, sO) % Test case true

% c_door_confirmed(dLI, sC) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(dLI, sO) % Test case false
% c_door_confirmed(dLI, sC) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(dLI, sO) % Test case false
% c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aG) . c_door_confirmed(dLI, sC) % Test case true
% c_door_confirmed(dLI, sO) . c_move_confirmed(rI, cI, aR) . c_door_confirmed(dLI, sC) % Test case true

% c_door_confirmed(dH , sO) . c_move_confirmed(rO, cH, aG) . c_door_confirmed(dH , sC) % Test case true
% c_door_confirmed(dLI, sO) . c_door_confirmed(dLI, sC) . c_move_confirmed(rI, cI, aG) % Test case false

&&
% #11

% Eventually the wafer stepper the system must always indicate that it has finished.

mu X.([!system_finished]X && <true>true)

%[true*]<system_finished>true
